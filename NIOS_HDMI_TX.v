
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module NIOS_HDMI_TX(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [7:0]		LED,

	//////////// CapSense Button //////////
	inout 		          		CAP_SENSE_I2C_SCL,
	inout 		          		CAP_SENSE_I2C_SDA,

	//////////// Audio //////////
	inout 		          		AUDIO_BCLK,
	output		          		AUDIO_DIN_MFP1,
	input 		          		AUDIO_DOUT_MFP2,
	inout 		          		AUDIO_GPIO_MFP5,
	output		          		AUDIO_MCLK,
	input 		          		AUDIO_MISO_MFP4,
	inout 		          		AUDIO_RESET_n,
	output		          		AUDIO_SCL_SS_n,
	output		          		AUDIO_SCLK_MFP3,
	output		          		AUDIO_SDA_MOSI,
	output		          		AUDIO_SPI_SELECT,
	inout 		          		AUDIO_WCLK,

	//////////// Flash //////////
	inout 		     [3:0]		FLASH_DATA,
	output		          		FLASH_DCLK,
	output		          		FLASH_NCSO,
	output		          		FLASH_RESET_n,

	//////////// G-Sensor //////////
	output		          		GSENSOR_PD,
	output		          		GSENSOR_ST,

	//////////// HDMI-TX //////////
	inout 		          		HDMI_I2C_SCL,
	inout 		          		HDMI_I2C_SDA,
	inout 		     [3:0]		HDMI_I2S,
	inout 		          		HDMI_LRCLK,
	inout 		          		HDMI_MCLK,
	inout 		          		HDMI_SCLK,
	output		          		HDMI_TX_CLK,
	output		    [23:0]		HDMI_TX_D,
	output		     reg  		HDMI_TX_DE,
	output		     reg  		HDMI_TX_HS,
	input 		          		HDMI_TX_INT,
	output		     reg  		HDMI_TX_VS,

	//////////// Light Sensor //////////
	output		          		LIGHT_I2C_SCL,
	inout 		          		LIGHT_I2C_SDA,
	inout 		          		LIGHT_INT,

	//////////// Ethernet //////////
	input 		          		NET_COL,
	input 		          		NET_CRS,
	output		          		NET_MDC,
	inout 		          		NET_MDIO,
	output		          		NET_PCF_EN,
	output		          		NET_RESET_n,
	input 		          		NET_RX_CLK,
	input 		          		NET_RX_DV,
	input 		          		NET_RX_ER,
	input 		     [3:0]		NET_RXD,
	input 		          		NET_TX_CLK,
	output		          		NET_TX_EN,
	output		     [3:0]		NET_TXD,

	//////////// Power Monitor //////////
	input 		          		PMONITOR_ALERT,
	output		          		PMONITOR_I2C_SCL,
	inout 		          		PMONITOR_I2C_SDA,

	//////////// Humidity and Temperature Sensor //////////
	input 		          		RH_TEMP_DRDY_n,
	output		          		RH_TEMP_I2C_SCL,
	inout 		          		RH_TEMP_I2C_SDA,

	//////////// MicroSD Card //////////
	output		          		SD_CLK,
	inout 		          		SD_CMD,
	output		          		SD_CMD_DIR,
	output		          		SD_D0_DIR,
	inout 		          		SD_D123_DIR,
	inout 		     [3:0]		SD_DAT,
	input 		          		SD_FB_CLK,
	output		          		SD_SEL,

	//////////// SW //////////
	input 		     [1:0]		SW,

	//////////// Board Temperature Sensor //////////
	output		          		TEMP_CS_n,
	output		          		TEMP_SC,
	inout 		          		TEMP_SIO,

	//////////// USB //////////
	input 		          		USB_CLKIN,
	output		          		USB_CS,
	inout 		     [7:0]		USB_DATA,
	input 		          		USB_DIR,
	input 		          		USB_FAULT_n,
	input 		          		USB_NXT,
	output		          		USB_RESET_n,
	output		          		USB_STP,

	//////////// BBB Conector //////////
	input 		          		BBB_PWR_BUT,
	input 		          		BBB_SYS_RESET_n,
	inout 		    [43:0]		GPIO0_D,
	inout 		    [22:0]		GPIO1_D
);


//=======================================================
//  REG/WIRE declarations
//=======================================================

wire reset_n;
wire audio_mclk;
wire adc_pll_locked;
wire pll_1536k;
wire vo_clock;

wire [7:0] vpg_g,vpg_b,vpg_r;
wire vpg_de,vpg_hs,vpg_vs;
//wire [7:0] packed_g,packed_b,packed_r;

//=======================================================
//  Structural coding
//=======================================================

assign reset_n = 1'b1;
assign HDMI_TX_CLK = vo_clock^SW[0];
//genvar i;
//generate 
//	for(i=0;i<4;i=i+1)begin : ddr_pack
//		assign packed_g[i*2+1] = vpg_g[i];
//		assign packed_r[i*2+1] = vpg_r[i];
//		assign packed_b[i*2+1] = vpg_b[i];
//		assign packed_g[i*2] = vpg_g[i+4];
//		assign packed_r[i*2] = vpg_r[i+4];
//		assign packed_b[i*2] = vpg_b[i+4];
//	end
//endgenerate

always@(posedge vo_clock)begin
	HDMI_TX_DE <= vpg_de;
	HDMI_TX_HS <= vpg_hs;
	HDMI_TX_VS <= vpg_vs;
end

//sys_pll u_sys_pll (
//   .inclk0(MAX10_CLK1_50),
//	.areset(!KEY[0]),
//	.c0(pll_1536k)
//	);
wire [47:0] test_bits;
ddrio ddr_vo(
		.outclock(vo_clock), // outclock.export
		.din({test_bits[23:0],vpg_r,vpg_g,vpg_b}),      //      din.export
		.pad_out(HDMI_TX_D)   //  pad_out.export
	);
	
//pattern generator
vpg	u_vpg (
	.clk_50(MAX10_CLK2_50),
	.reset_n(reset_n), 
	.vpg_pclk_out(vo_clock),
	.vpg_de(vpg_de),
	.vpg_hs(vpg_hs),
	.vpg_vs(vpg_vs),
  .colorbit_test(test_bits),
	.vpg_r(vpg_r),
	.vpg_g(vpg_g),
	.vpg_b(vpg_b) );
	
//AUDIO_IF u_AVG(
//	.clk(pll_1536k),
//	.reset_n(reset_n),
//	.sclk(HDMI_SCLK),
//	.lrclk(HDMI_LRCLK),
//	.i2s(HDMI_I2S),
//);


    amax10_qsys u0 (
        .clk_clk                                  (MAX10_CLK1_50),                                  //                               clk.clk
        .reset_reset_n                            (reset_n),                            //                             reset.reset_n
        .i2c_scl_external_connection_export       (HDMI_I2C_SCL),       //       i2c_scl_external_connection.export
        .i2c_sda_external_connection_export       (HDMI_I2C_SDA),       //       i2c_sda_external_connection.export
        .hdmi_tx_int_external_connection_export (HDMI_TX_INT)  // hdmi_tx_int_n_external_connection.export
    );


endmodule
